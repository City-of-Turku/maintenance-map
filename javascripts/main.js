// Generated by CoffeeScript 1.6.3
(function() {
  var activeMarkers, activePolylines, addMapLine, clearMap, createPlowTrail, createPlowsOnMap, dropMapMarker, getActivePlows, getPlowJobColor, initializeGoogleMaps, map, populateMap, showNotification, snowAPI;

  snowAPI = "http://dev.hel.fi/aura/v1/snowplow/";

  activePolylines = [];

  activeMarkers = [];

  map = null;

  initializeGoogleMaps = function(callback, time) {
    var helsinkiCenter, mapOptions, styles;
    helsinkiCenter = new google.maps.LatLng(60.193084, 24.940338);
    mapOptions = {
      center: helsinkiCenter,
      zoom: 13,
      disableDefaultUI: true,
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.LARGE,
        position: google.maps.ControlPosition.LEFT_BOTTOM
      }
    };
    styles = [
      {
        "stylers": [
          {
            "invert_lightness": true
          }, {
            "hue": "#00bbff"
          }, {
            "weight": 0.4
          }, {
            "saturation": 80
          }
        ]
      }, {
        "featureType": "road.arterial",
        "stylers": [
          {
            "color": "#00bbff"
          }, {
            "weight": 0.1
          }
        ]
      }, {
        "elementType": "labels",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      }, {
        "featureType": "administrative.locality",
        "stylers": [
          {
            "visibility": "on"
          }
        ]
      }, {
        "featureType": "administrative.neighborhood",
        "stylers": [
          {
            "visibility": "on"
          }
        ]
      }, {
        "featureType": "administrative.land_parcel",
        "stylers": [
          {
            "visibility": "on"
          }
        ]
      }
    ];
    map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
    map.setOptions({
      styles: styles
    });
    return callback(time);
  };

  dropMapMarker = function(plowJobColor, lat, lng) {
    var marker, snowPlowMarker;
    snowPlowMarker = {
      path: "M10 10 H 90 V 90 H 10 L 10 10",
      fillColor: plowJobColor,
      strokeColor: plowJobColor,
      strokeWeight: 9,
      strokeOpacity: 0.8,
      scale: 0.01
    };
    marker = new google.maps.Marker({
      position: new google.maps.LatLng(lat, lng),
      map: map,
      icon: snowPlowMarker
    });
    activeMarkers.push(marker);
    return marker;
  };

  getPlowJobColor = function(job) {
    switch (job) {
      case "kv":
        return "#84ff00";
      case "au":
        return "#f2c12e";
      case "su":
        return "#d93425";
      case "hi":
        return "#ffffff";
      default:
        return "#6c00ff";
    }
  };

  addMapLine = function(plowData, plowJobId) {
    var plowTrailColor, polyline, polylinePath;
    plowTrailColor = getPlowJobColor(plowJobId);
    polylinePath = _.reduce(plowData, (function(accu, x) {
      accu.push(new google.maps.LatLng(x.coords[1], x.coords[0]));
      return accu;
    }), []);
    polyline = new google.maps.Polyline({
      path: polylinePath,
      geodesic: true,
      strokeColor: plowTrailColor,
      strokeWeight: 1.5,
      strokeOpacity: 0.6
    });
    activePolylines.push(polyline);
    return polyline.setMap(map);
  };

  clearMap = function() {
    _.map(activePolylines, function(polyline) {
      return polyline.setMap(null);
    });
    return _.map(activeMarkers, function(marker) {
      return marker.setMap(null);
    });
  };

  showNotification = function(notificationText) {
    var $notification;
    $notification = $("#notification");
    $notification.empty().text(notificationText).addClass("active").delay(4000).queue(function() {
      return $(this).removeClass("active");
    });
    return $notification.asEventStream('click').onValue(function() {
      return $notification.removeClass("active");
    });
  };

  getActivePlows = function(time, callback) {
    var plowPositions;
    plowPositions = Bacon.fromPromise($.getJSON("" + snowAPI + "?since=" + time));
    plowPositions.onValue(function(json) {
      if (json.length !== 0) {
        return callback(time, json);
      } else {
        return showNotification("Yksikään ajoneuvo ei ole työskennellyt valitulla ajalla. Valitse jokin muu aika!");
      }
    });
    return plowPositions.onError(function(error) {
      return console.error("Failed to fetch active snowplows: " + (JSON.stringify(error)));
    });
  };

  createPlowTrail = function(time, plowId, historyData) {
    var plowPositions, splitPlowDataByJob;
    splitPlowDataByJob = function(plowData) {
      return _.groupBy(plowData.history, (function(x) {
        return x.events[0];
      }), []);
    };
    plowPositions = Bacon.fromPromise($.getJSON("" + snowAPI + plowId + "?since=" + time + "&temporal_resolution=2"));
    plowPositions.onValue(function(json) {
      if (json.length !== 0) {
        return _.map(splitPlowDataByJob(json), function(oneJobOfThisPlow) {
          return addMapLine(oneJobOfThisPlow, oneJobOfThisPlow[0].events[0]);
        });
      } else {
        return showNotification("Aura " + plowId + " ei ole työskennellyt tänä aikana.");
      }
    });
    return plowPositions.onError(function(error) {
      return console.error("Failed to create snowplow trail for plow " + plowId + ": " + error);
    });
  };

  createPlowsOnMap = function(time, json) {
    return _.each(json, function(x) {
      createPlowTrail(time, x.id, json);
      return dropMapMarker(getPlowJobColor(x.last_loc.events[0]), x.last_loc.coords[1], x.last_loc.coords[0]);
    });
  };

  populateMap = function(time) {
    return getActivePlows("" + time + "hours+ago", function(time, json) {
      return createPlowsOnMap(time, json);
    });
  };

  $(document).ready(function() {
    initializeGoogleMaps(populateMap, 24);
    $("#time-filters li").asEventStream("click").onValue(function(e) {
      e.preventDefault();
      clearMap();
      populateMap($(e.currentTarget).data('time'));
      $("#time-filters li").removeClass("active");
      return $(e.currentTarget).addClass("active");
    });
    return $("#info-close, #info-button").asEventStream("click").onValue(function(e) {
      e.preventDefault();
      return $("#info").toggleClass("off");
    });
  });

  console.log("%c                                                                               \n      _________                            .__                                 \n     /   _____/ ____   ______  _  ________ |  |   ______  _  ________          \n     \\_____  \\ /    \\ /  _ \\ \\/ \\/ /\\____ \\|  |  /  _ \\ \\/ \\/ /  ___/          \n     /        \\   |  (  <_> )     / |  |_> >  |_(  <_> )     /\\___ \\           \n    /_______  /___|  /\\____/ \\/\\_/  |   __/|____/\\____/ \\/\\_//____  >          \n            \\/     \\/ .__           |__|     .__  .__             \\/   .___    \n                ___  _|__| ________ _______  |  | |__|_______ ____   __| _/    \n        Sampsa  \\  \\/ /  |/  ___/  |  \\__  \\ |  | |  \\___   // __ \\ / __ |     \n        Kuronen  \\   /|  |\\___ \\|  |  // __ \\|  |_|  |/    /\\  ___// /_/ |     \n            2014  \\_/ |__/____  >____/(____  /____/__/_____ \\\\___  >____ |     \n                              \\/           \\/              \\/    \\/     \\/     \n                  https://github.com/sampsakuronen/snowplow-visualization      \n                                                                               ", 'background: #001e29; color: #00bbff');

  console.log("It is nice to see that you want to know how something is made. We are looking for guys like you: http://reaktor.fi/careers/");

}).call(this);
